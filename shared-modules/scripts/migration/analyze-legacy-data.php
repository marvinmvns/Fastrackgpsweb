<?php
/**
 * Script de An√°lise de Dados Legacy
 * 
 * Este script analisa os dados do sistema legacy para preparar a migra√ß√£o
 * para o sistema moderno. Gera relat√≥rios de inconsist√™ncias e problemas
 * que precisam ser resolvidos antes da migra√ß√£o.
 * 
 * @package FastrackGPS
 * @subpackage Migration
 * @author FastrackGPS Team
 * @version 2.0.0
 */

declare(strict_types=1);

require_once __DIR__ . '/../../config/database.php';

class LegacyDataAnalyzer
{
    private PDO $connection;
    private array $analysis = [];
    private array $issues = [];
    
    public function __construct()
    {
        $config = require __DIR__ . '/../../config/database.php';
        
        $dsn = "mysql:host={$config['host']};dbname={$config['database']};charset={$config['charset']}";
        $this->connection = new PDO($dsn, $config['username'], $config['password'], [
            PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,
            PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC,
        ]);
    }
    
    public function analyze(): void
    {
        echo "üîç Iniciando an√°lise dos dados legacy...\n\n";
        
        $this->analyzeUsers();
        $this->analyzeVehicles();
        $this->analyzePositions();
        $this->analyzeAlerts();
        $this->analyzeGeofences();
        $this->analyzeCommands();
        $this->analyzeDatabaseIntegrity();
        
        $this->generateReport();
    }
    
    private function analyzeUsers(): void
    {
        echo "üìä Analisando usu√°rios...\n";
        
        // Contar usu√°rios total
        $stmt = $this->connection->query("SELECT COUNT(*) as total FROM usuarios");
        $total = $stmt->fetch()['total'];
        $this->analysis['users']['total'] = $total;
        
        // Usu√°rios ativos/inativos
        $stmt = $this->connection->query("
            SELECT 
                SUM(CASE WHEN ativo = 1 THEN 1 ELSE 0 END) as active,
                SUM(CASE WHEN ativo = 0 THEN 1 ELSE 0 END) as inactive
            FROM usuarios
        ");
        $status = $stmt->fetch();
        $this->analysis['users']['active'] = $status['active'] ?? 0;
        $this->analysis['users']['inactive'] = $status['inactive'] ?? 0;
        
        // Verificar usu√°rios com dados inv√°lidos
        $stmt = $this->connection->query("
            SELECT COUNT(*) as invalid 
            FROM usuarios 
            WHERE email IS NULL OR email = '' OR nome IS NULL OR nome = ''
        ");
        $invalid = $stmt->fetch()['invalid'];
        if ($invalid > 0) {
            $this->issues[] = "‚ö†Ô∏è  {$invalid} usu√°rios com dados obrigat√≥rios em branco";
        }
        
        // Verificar emails duplicados
        $stmt = $this->connection->query("
            SELECT email, COUNT(*) as count 
            FROM usuarios 
            WHERE email IS NOT NULL AND email != ''
            GROUP BY email 
            HAVING count > 1
        ");
        $duplicates = $stmt->fetchAll();
        if (count($duplicates) > 0) {
            $this->issues[] = "‚ö†Ô∏è  " . count($duplicates) . " emails duplicados encontrados";
        }
        
        echo "   ‚úÖ {$total} usu√°rios analisados\n";
    }
    
    private function analyzeVehicles(): void
    {
        echo "üìä Analisando ve√≠culos...\n";
        
        // Contar ve√≠culos total
        $stmt = $this->connection->query("SELECT COUNT(*) as total FROM veiculos");
        $total = $stmt->fetch()['total'];
        $this->analysis['vehicles']['total'] = $total;
        
        // Ve√≠culos por usu√°rio
        $stmt = $this->connection->query("
            SELECT AVG(vehicle_count) as avg_per_user
            FROM (
                SELECT COUNT(*) as vehicle_count 
                FROM veiculos 
                GROUP BY id_usuario
            ) as counts
        ");
        $avg = $stmt->fetch()['avg_per_user'];
        $this->analysis['vehicles']['avg_per_user'] = round($avg, 2);
        
        // Verificar ve√≠culos sem IMEI
        $stmt = $this->connection->query("
            SELECT COUNT(*) as without_imei 
            FROM veiculos 
            WHERE imei IS NULL OR imei = ''
        ");
        $without_imei = $stmt->fetch()['without_imei'];
        if ($without_imei > 0) {
            $this->issues[] = "‚ö†Ô∏è  {$without_imei} ve√≠culos sem IMEI";
        }
        
        // Verificar IMEIs duplicados
        $stmt = $this->connection->query("
            SELECT imei, COUNT(*) as count 
            FROM veiculos 
            WHERE imei IS NOT NULL AND imei != ''
            GROUP BY imei 
            HAVING count > 1
        ");
        $duplicate_imeis = $stmt->fetchAll();
        if (count($duplicate_imeis) > 0) {
            $this->issues[] = "‚ö†Ô∏è  " . count($duplicate_imeis) . " IMEIs duplicados encontrados";
        }
        
        echo "   ‚úÖ {$total} ve√≠culos analisados\n";
    }
    
    private function analyzePositions(): void
    {
        echo "üìä Analisando posi√ß√µes GPS...\n";
        
        // Contar posi√ß√µes total
        $stmt = $this->connection->query("SELECT COUNT(*) as total FROM posicoes");
        $total = $stmt->fetch()['total'];
        $this->analysis['positions']['total'] = $total;
        
        // Posi√ß√µes dos √∫ltimos 30 dias
        $stmt = $this->connection->query("
            SELECT COUNT(*) as recent 
            FROM posicoes 
            WHERE data_hora >= DATE_SUB(NOW(), INTERVAL 30 DAY)
        ");
        $recent = $stmt->fetch()['recent'];
        $this->analysis['positions']['last_30_days'] = $recent;
        
        // Verificar posi√ß√µes inv√°lidas
        $stmt = $this->connection->query("
            SELECT COUNT(*) as invalid 
            FROM posicoes 
            WHERE latitude = 0 OR longitude = 0 OR latitude IS NULL OR longitude IS NULL
        ");
        $invalid = $stmt->fetch()['invalid'];
        if ($invalid > 0) {
            $this->issues[] = "‚ö†Ô∏è  {$invalid} posi√ß√µes com coordenadas inv√°lidas";
        }
        
        // Verificar posi√ß√µes muito antigas
        $stmt = $this->connection->query("
            SELECT COUNT(*) as old_positions 
            FROM posicoes 
            WHERE data_hora < DATE_SUB(NOW(), INTERVAL 1 YEAR)
        ");
        $old = $stmt->fetch()['old_positions'];
        $this->analysis['positions']['older_than_year'] = $old;
        
        echo "   ‚úÖ {$total} posi√ß√µes analisadas\n";
    }
    
    private function analyzeAlerts(): void
    {
        echo "üìä Analisando alertas...\n";
        
        // Verificar se tabela de alertas existe
        $stmt = $this->connection->query("SHOW TABLES LIKE 'alertas'");
        if ($stmt->fetch()) {
            $stmt = $this->connection->query("SELECT COUNT(*) as total FROM alertas");
            $total = $stmt->fetch()['total'];
            $this->analysis['alerts']['total'] = $total;
            
            // Alertas por tipo
            $stmt = $this->connection->query("
                SELECT tipo, COUNT(*) as count 
                FROM alertas 
                GROUP BY tipo
            ");
            $types = $stmt->fetchAll();
            $this->analysis['alerts']['by_type'] = $types;
            
            echo "   ‚úÖ {$total} alertas analisados\n";
        } else {
            $this->analysis['alerts']['total'] = 0;
            $this->issues[] = "‚ö†Ô∏è  Tabela 'alertas' n√£o encontrada";
            echo "   ‚ö†Ô∏è  Tabela de alertas n√£o encontrada\n";
        }
    }
    
    private function analyzeGeofences(): void
    {
        echo "üìä Analisando cercas virtuais...\n";
        
        // Verificar se tabela de cercas existe
        $stmt = $this->connection->query("SHOW TABLES LIKE 'cercas'");
        if ($stmt->fetch()) {
            $stmt = $this->connection->query("SELECT COUNT(*) as total FROM cercas");
            $total = $stmt->fetch()['total'];
            $this->analysis['geofences']['total'] = $total;
            
            // Cercas ativas/inativas
            $stmt = $this->connection->query("
                SELECT 
                    SUM(CASE WHEN ativo = 1 THEN 1 ELSE 0 END) as active,
                    SUM(CASE WHEN ativo = 0 THEN 1 ELSE 0 END) as inactive
                FROM cercas
            ");
            $status = $stmt->fetch();
            $this->analysis['geofences']['active'] = $status['active'] ?? 0;
            $this->analysis['geofences']['inactive'] = $status['inactive'] ?? 0;
            
            echo "   ‚úÖ {$total} cercas virtuais analisadas\n";
        } else {
            $this->analysis['geofences']['total'] = 0;
            $this->issues[] = "‚ö†Ô∏è  Tabela 'cercas' n√£o encontrada";
            echo "   ‚ö†Ô∏è  Tabela de cercas n√£o encontrada\n";
        }
    }
    
    private function analyzeCommands(): void
    {
        echo "üìä Analisando comandos...\n";
        
        // Verificar se tabela de comandos existe
        $stmt = $this->connection->query("SHOW TABLES LIKE 'comandos'");
        if ($stmt->fetch()) {
            $stmt = $this->connection->query("SELECT COUNT(*) as total FROM comandos");
            $total = $stmt->fetch()['total'];
            $this->analysis['commands']['total'] = $total;
            
            // Comandos por status
            $stmt = $this->connection->query("
                SELECT status, COUNT(*) as count 
                FROM comandos 
                GROUP BY status
            ");
            $statuses = $stmt->fetchAll();
            $this->analysis['commands']['by_status'] = $statuses;
            
            echo "   ‚úÖ {$total} comandos analisados\n";
        } else {
            $this->analysis['commands']['total'] = 0;
            $this->issues[] = "‚ö†Ô∏è  Tabela 'comandos' n√£o encontrada";
            echo "   ‚ö†Ô∏è  Tabela de comandos n√£o encontrada\n";
        }
    }
    
    private function analyzeDatabaseIntegrity(): void
    {
        echo "üìä Verificando integridade do banco...\n";
        
        // Verificar refer√™ncias √≥rf√£s de ve√≠culos
        $stmt = $this->connection->query("
            SELECT COUNT(*) as orphan_vehicles
            FROM veiculos v
            LEFT JOIN usuarios u ON v.id_usuario = u.id
            WHERE u.id IS NULL
        ");
        $orphan_vehicles = $stmt->fetch()['orphan_vehicles'];
        if ($orphan_vehicles > 0) {
            $this->issues[] = "‚ö†Ô∏è  {$orphan_vehicles} ve√≠culos √≥rf√£os (sem usu√°rio v√°lido)";
        }
        
        // Verificar refer√™ncias √≥rf√£s de posi√ß√µes
        $stmt = $this->connection->query("
            SELECT COUNT(*) as orphan_positions
            FROM posicoes p
            LEFT JOIN veiculos v ON p.id_veiculo = v.id
            WHERE v.id IS NULL
            LIMIT 1000
        ");
        $orphan_positions = $stmt->fetch()['orphan_positions'];
        if ($orphan_positions > 0) {
            $this->issues[] = "‚ö†Ô∏è  {$orphan_positions}+ posi√ß√µes √≥rf√£s (sem ve√≠culo v√°lido)";
        }
        
        echo "   ‚úÖ Integridade verificada\n";
    }
    
    private function generateReport(): void
    {
        echo "\n" . str_repeat("=", 60) . "\n";
        echo "üìã RELAT√ìRIO DE AN√ÅLISE DOS DADOS LEGACY\n";
        echo str_repeat("=", 60) . "\n\n";
        
        // Resumo geral
        echo "üìä RESUMO GERAL:\n";
        echo "   üë• Usu√°rios: " . ($this->analysis['users']['total'] ?? 0) . 
             " ({$this->analysis['users']['active']} ativos, {$this->analysis['users']['inactive']} inativos)\n";
        echo "   üöó Ve√≠culos: " . ($this->analysis['vehicles']['total'] ?? 0) . 
             " (m√©dia de {$this->analysis['vehicles']['avg_per_user']} por usu√°rio)\n";
        echo "   üìç Posi√ß√µes: " . ($this->analysis['positions']['total'] ?? 0) . 
             " ({$this->analysis['positions']['last_30_days']} nos √∫ltimos 30 dias)\n";
        echo "   üö® Alertas: " . ($this->analysis['alerts']['total'] ?? 0) . "\n";
        echo "   üîí Cercas: " . ($this->analysis['geofences']['total'] ?? 0) . "\n";
        echo "   üì° Comandos: " . ($this->analysis['commands']['total'] ?? 0) . "\n\n";
        
        // Issues encontrados
        if (!empty($this->issues)) {
            echo "üö® PROBLEMAS ENCONTRADOS:\n";
            foreach ($this->issues as $issue) {
                echo "   {$issue}\n";
            }
            echo "\n";
        }
        
        // Recomenda√ß√µes
        echo "üí° RECOMENDA√á√ïES:\n";
        
        if (count($this->issues) > 0) {
            echo "   üîß Execute o script de limpeza antes da migra√ß√£o\n";
            echo "   üìù Resolva os problemas identificados acima\n";
        }
        
        if (($this->analysis['positions']['older_than_year'] ?? 0) > 0) {
            echo "   üóÑÔ∏è  Considere arquivar posi√ß√µes antigas (> 1 ano)\n";
        }
        
        if (($this->analysis['positions']['total'] ?? 0) > 1000000) {
            echo "   ‚ö° Migra√ß√£o de posi√ß√µes ser√° feita em lotes (pode demorar)\n";
        }
        
        echo "   ‚úÖ Sistema pronto para migra√ß√£o ap√≥s resolver os problemas\n\n";
        
        // Salvar relat√≥rio em arquivo
        $report_data = [
            'timestamp' => date('Y-m-d H:i:s'),
            'analysis' => $this->analysis,
            'issues' => $this->issues
        ];
        
        $report_file = __DIR__ . '/../../logs/legacy-analysis-' . date('Y-m-d-H-i-s') . '.json';
        file_put_contents($report_file, json_encode($report_data, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE));
        
        echo "üíæ Relat√≥rio salvo em: {$report_file}\n";
        echo "üéØ Execute: php clean-legacy-data.php para resolver problemas automaticamente\n\n";
    }
}

// Executar an√°lise
try {
    $analyzer = new LegacyDataAnalyzer();
    $analyzer->analyze();
} catch (Exception $e) {
    echo "‚ùå Erro durante an√°lise: " . $e->getMessage() . "\n";
    echo "üîç Verifique se o banco de dados est√° configurado corretamente\n";
    exit(1);
}